import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.t = 0               #Trial number counter
        self.epsilon2 = epsilon  #Stores initial value for epsilon

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        
        #Epsilon update stipulated earlier in project
        #'correction' is used to fix representation errors
        #correction = 100
        #self.epsilon = ((self.epsilon2)*correction - self.t*5)*1./correction
        
        #Epsilon for optimized implementation
        self.epsilon = self.epsilon2 * 0.96**self.t
        
        self.t+=1                #Update trial number counter
        
        
        if testing:
            self.epsilon = 0
            self.alpha = 0

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent        
        
        #Original state:
        #state = (waypoint, inputs['light'], inputs['left'], inputs['oncoming'])
        #Preferred state based on findings described in Question 7:
        state = (waypoint, inputs['light'], inputs['oncoming'])
        return state

    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state
        #maxQ = 0
        #for act in self.Q[state]:
        #    if self.Q[state][act] > maxQ:
        #        maxQ = self.Q[state][act]
        
        maxQ = max(self.Q[state].itervalues())

        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        
        if self.learning != False:
            if not self.Q.has_key(state):
                self.Q[state] = {}
                for act in self.valid_actions:
                    self.Q[state][act] = 0
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        action = random.choice(self.valid_actions)

        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
        
        #Old incorrect way of doing things
        
        if self.learning:
            p = random.random() #Better way of picking this?
                                   #YES, there is a MUCH better way! Great comment from reviewer (found below) helped me see this!
            if p < self.epsilon:
                action = random.choice(self.valid_actions)
            else: 
                action = max(self.Q[state].iterkeys(), key =(lambda key: self.Q[state][key]))
            #How to deal with identical Q-value, think this takes care of itself because dictionaires are not ordered.\
            #Edit: See Boltzmann Below
        return action

        
        #Comment From Reviewer:
        #Your agent should be choosing a random action from a choice of actions that have the highest Q-value. 
        #For example, since all actions are initialized with a reward of zero, it's possible that all four actions are considered "optimal".
        #Not having the agent choose a random action from this would imply that it always chooses, perhaps, the first available option.
        
        #Reponse:
        #This has motivated me to use a Boltzmann Distribution in order to select the appropriate action.
        #Boltzmann Distribution. Epsilon can still be used to control learning/exploration of driving agent.
        #p(action) = e^(reward for action)/(sum of all)e^(reward for action)
        
        if self.learning == 'Boltzmann':
        #e raised to the "energy state," which here are the rewards
        #epsilon will be used as a scaling factor, used in place of kT from stat mech definition.
        #An epsilon higher than 1 promotes exploration, less than one encourages the use of learned behaviors; correct behavior for this implementation
            exp_left = math.exp(self.Q[state]['left']/self.epsilon)
            exp_right = math.exp(self.Q[state]['right']/self.epsilon)
            exp_forward = math.exp(self.Q[state]['forward']/self.epsilon)
            exp_None = math.exp(self.Q[state][None]/self.epsilon)
            sum = exp_left + exp_right + exp_forward + exp_None
        #Probabilities of states occuring based on current rewards
            p_left = exp_left/sum
            p_right = exp_right/sum
            p_forward = exp_forward/sum
            p_None = exp_None/sum
        #Create number line from probabilities
            range_left = exp_left
            range_right = range_left + exp_right
            range_forward = range_right + exp_forward
            range_None = 1 #Probabilities will add to 1
        #Choose Random Number
            rand = random.random()
            
        #Testing
            print rand
        #End Testing
        
        #Determine action based on random number generated
            if 0<=rand<range_left:
                action = 'left'
            elif range_left<=rand<range_right:
                action = 'right'
            elif range_right<=rand<range_forward:
                action = 'forward'
            elif range_forward<=rand<=range_None:
                action = None
                
        return action

    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        
        if self.learning != False:
            self.Q[state][action] = (1-self.alpha)*self.Q[state][action] + self.alpha*reward
        
        return


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return
        

def run():
    """ Driving function for running the simulation.  
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #              - set to Boltzmann to use modified and correct distribution
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = 'Boltzmann', alpha = 0.5, epsilon = 1)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #                - set to Boltzmann for new distribution.
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay = 0.0001, display = False, log_metrics = 'Boltzmann', optimized = True    )
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test = 100, tolerance = 0.01)


if __name__ == '__main__':
    run()
